{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aggel\\\\Downloads\\\\LLMs\\\\pwa-chat-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport ChatHistory from './components/ChatHistory';\nimport ChatInput from './components/ChatInput';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [chats, setChats] = useState([]);\n  const [currentChat, setCurrentChat] = useState(null);\n\n  // Load chat history from local storage\n  useEffect(() => {\n    const savedChats = localStorage.getItem('chats');\n    if (savedChats) {\n      const parsedChats = JSON.parse(savedChats);\n      setChats(parsedChats);\n      setCurrentChat(parsedChats.length > 0 ? 0 : null);\n      setMessages(parsedChats.length > 0 ? parsedChats[0].messages : []);\n    }\n  }, []);\n\n  // Save chat history to local storage whenever it changes\n  useEffect(() => {\n    if (chats.length > 0) {\n      localStorage.setItem('chats', JSON.stringify(chats));\n    }\n  }, [chats]);\n  const handleSend = async message => {\n    if (currentChat !== null) {\n      try {\n        const botMessage = await getBotResponse(message);\n        setChats(prevChats => {\n          const updatedChats = [...prevChats];\n          const currentChatMessages = updatedChats[currentChat].messages;\n          if (!currentChatMessages.find(msg => msg.text === message)) {\n            currentChatMessages.push({\n              sender: 'user',\n              text: message\n            });\n          }\n          if (!currentChatMessages.find(msg => msg.text === botMessage)) {\n            currentChatMessages.push({\n              sender: 'bot',\n              text: botMessage\n            });\n          }\n          return updatedChats;\n        });\n        setMessages(prevMessages => {\n          const updatedMessages = [...prevMessages];\n          if (!updatedMessages.find(msg => msg.text === message)) {\n            updatedMessages.push({\n              sender: 'user',\n              text: message\n            });\n          }\n          if (!updatedMessages.find(msg => msg.text === botMessage)) {\n            updatedMessages.push({\n              sender: 'bot',\n              text: botMessage\n            });\n          }\n          return updatedMessages;\n        });\n      } catch (error) {\n        console.error('Error communicating with the API:', error);\n      }\n    }\n  };\n  const handleNewChat = () => {\n    const newChat = {\n      id: chats.length,\n      messages: []\n    };\n    setChats(prevChats => [...prevChats, newChat]);\n    setCurrentChat(newChat.id);\n    setMessages([]);\n  };\n  const handleSelectChat = chatId => {\n    setCurrentChat(chatId);\n    setMessages(chats[chatId].messages);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNewChat,\n        children: \"New Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatHistory, {\n        chats: chats,\n        onSelectChat: handleSelectChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-window\",\n        children: currentChat !== null && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${message.sender}`,\n            children: message.text\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 17\n          }, this))\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        onSend: handleSend\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"ZQSUw+VfuWZaK0LQjd99yi/HiyU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","ChatHistory","ChatInput","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","messages","setMessages","chats","setChats","currentChat","setCurrentChat","savedChats","localStorage","getItem","parsedChats","JSON","parse","length","setItem","stringify","handleSend","message","botMessage","getBotResponse","prevChats","updatedChats","currentChatMessages","find","msg","text","push","sender","prevMessages","updatedMessages","error","console","handleNewChat","newChat","id","handleSelectChat","chatId","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onSelectChat","map","index","onSend","_c","$RefreshReg$"],"sources":["C:/Users/aggel/Downloads/LLMs/pwa-chat-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport ChatHistory from './components/ChatHistory';\nimport ChatInput from './components/ChatInput';\nimport './App.css';\n\nconst App = () => {\n  const [messages, setMessages] = useState([]);\n  const [chats, setChats] = useState([]);\n  const [currentChat, setCurrentChat] = useState(null);\n\n  // Load chat history from local storage\n  useEffect(() => {\n    const savedChats = localStorage.getItem('chats');\n    if (savedChats) {\n      const parsedChats = JSON.parse(savedChats);\n      setChats(parsedChats);\n      setCurrentChat(parsedChats.length > 0 ? 0 : null);\n      setMessages(parsedChats.length > 0 ? parsedChats[0].messages : []);\n    }\n  }, []);\n\n  // Save chat history to local storage whenever it changes\n  useEffect(() => {\n    if (chats.length > 0) {\n      localStorage.setItem('chats', JSON.stringify(chats));\n    }\n  }, [chats]);\n\n  const handleSend = async (message) => {\n    if (currentChat !== null) {\n      try {\n        const botMessage = await getBotResponse(message);\n  \n        setChats((prevChats) => {\n          const updatedChats = [...prevChats];\n          const currentChatMessages = updatedChats[currentChat].messages;\n          if (!currentChatMessages.find(msg => msg.text === message)) {\n            currentChatMessages.push({ sender: 'user', text: message });\n          }\n          if (!currentChatMessages.find(msg => msg.text === botMessage)) {\n            currentChatMessages.push({ sender: 'bot', text: botMessage });\n          }\n          return updatedChats;\n        });\n  \n        setMessages((prevMessages) => {\n          const updatedMessages = [...prevMessages];\n          if (!updatedMessages.find(msg => msg.text === message)) {\n            updatedMessages.push({ sender: 'user', text: message });\n          }\n          if (!updatedMessages.find(msg => msg.text === botMessage)) {\n            updatedMessages.push({ sender: 'bot', text: botMessage });\n          }\n          return updatedMessages;\n        });\n      } catch (error) {\n        console.error('Error communicating with the API:', error);\n      }\n    }\n  };\n\n  const handleNewChat = () => {\n    const newChat = { id: chats.length, messages: [] };\n    setChats((prevChats) => [...prevChats, newChat]);\n    setCurrentChat(newChat.id);\n    setMessages([]);\n  };\n\n  const handleSelectChat = (chatId) => {\n    setCurrentChat(chatId);\n    setMessages(chats[chatId].messages);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"sidebar\">\n        <button onClick={handleNewChat}>New Chat</button>\n        <ChatHistory chats={chats} onSelectChat={handleSelectChat} />\n      </div>\n      <div className=\"main\">\n        <div className=\"chat-window\">\n          {currentChat !== null && (\n            <>\n              {messages.map((message, index) => (\n                <div key={index} className={`message ${message.sender}`}>\n                  {message.text}\n                </div>\n              ))}\n            </>\n          )}\n        </div>\n        <ChatInput onSend={handleSend} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}